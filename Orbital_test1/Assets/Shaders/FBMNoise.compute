// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GetNoise

#include "Assets/Shaders/NoisePlugin/Noise.compute"

static const float INF = 9999999.0f;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> points;
float groundThreshold;
float airThreshold; 
float minLowerbound;
float maxUpperbound;
int numOfPt;

float octaves;
float frequency;
float lacunarity;
float persistence;
int3 offset;
float chunkSize;

// fractal brownian motion implementation
float fbm(float3 pos, float octaves, float frequency, float lacunarity, float persistence)
{
    float amplitude = 1.0f;
    float ret = 0.0f;
    pos *= frequency;
    float divVal;
    for (int i = 0; i < octaves; ++i)
    {
        divVal += amplitude;
        ret += amplitude * SimplexNoise(pos);
        pos *= lacunarity;
        amplitude *= persistence;
    }
    return ret / divVal;
}

static int index(uint3 id)
{
    return id.z + numOfPt * (id.y + numOfPt * id.x);
}

[numthreads(8, 8, 8)]
void GetNoise(int3 id : SV_DispatchThreadID)
{
    if (any(id >= numOfPt))
        return;
    
    
    int pos = index(id);
    id += offset * (numOfPt - 1);
    float3 worldpos = id * chunkSize / (numOfPt - 1);
    float noiseVal = fbm(worldpos, octaves, frequency, lacunarity, persistence);
    
    float lerpVal = (worldpos.y - minLowerbound) / (maxUpperbound - minLowerbound);
    if (worldpos.y < minLowerbound)
        noiseVal = -1.0f;
    
    
    
    //float noiseVal = SimplexNoise(float3(id)) ;
    
    //if (id.y <= minLowerbound)
    //    noiseVal = INF; // forces the noise to become solid
    //else if (id.y >= maxUpperbound)
    //    noiseVal = -INF; // forces the noise to become air
    //else
    //    noiseVal = (airThreshold - groundThreshold) / (maxUpperbound - minLowerbound) * (id.y - minLowerbound);
    //    // adjust noise density base on y position
    
    points[pos] = noiseVal + lerpVal;
}